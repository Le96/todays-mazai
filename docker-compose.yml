version: "3"
services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 80 --root-path /api
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=${DB_PORT}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER=${DB_USER}
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.entrypoints=http
      - traefik.http.routers.api.priority=10
      - traefik.http.routers.api.rule=PathPrefix(`/api`)
      - traefik.http.routers.api.service=api
      - traefik.http.routers.api.middlewares=api@docker
      - traefik.http.middlewares.api.stripPrefix.prefixes=/api
      - traefik.http.services.api.loadBalancer.server.port=80
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - ./api/app:/app:ro
  db:
    image: postgres:latest
    command: >
      postgres
      -c listen_addresses='*'
#      -c log_destination=stderr
#      -c log_statement=all
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 2
    labels:
      - traefik.enable=false
    networks:
      - backend
    ports:
      - 5432:5432
    restart: unless-stopped
    volumes:
      - ./data:/var/lib/postgresql/data:rw
  scraper:
    build:
      context: ./utils
      dockerfile: Dockerfile
    depends_on:
      - traefik
    environment:
      - API_HOST=${API_HOST}
      - TWITTER_ACCESS_TOKEN_SECRET=${TWITTER_ACCESS_TOKEN_SECRET}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN}
      - TWITTER_CONSUMER_KEY=${TWITTER_CONSUMER_KEY}
      - TWITTER_CONSUMER_SECRET=${TWITTER_CONSUMER_SECRET}
    labels:
      - traefik.enable=false
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - ./utils:/app:ro
  traefik:
    image: traefik:latest
    command: traefik --providers.docker.exposedByDefault=false
    depends_on:
      - api
      - web
    networks:
      - backend
      - frontend
    ports:
      - 80:80
      - 8080:8080
    restart: unless-stopped
    volumes:
      - ./server/traefik.yml:/etc/traefik/traefik.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
  web:
    image: nginx:latest
    command: ["/usr/sbin/nginx", "-g", "daemon off;"]
    depends_on:
      - api
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.entrypoints=http
      - traefik.http.routers.web.priority=1
      - traefik.http.routers.web.rule=PathPrefix(`/`)
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - ./server/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./web/build:/usr/share/nginx/html:ro
networks:
  backend:
  frontend:
    external: true